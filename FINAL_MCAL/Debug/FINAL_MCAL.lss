
FINAL_MCAL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000c4a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bd6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000054  00800100  00800100  00000c4a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c4a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c7c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000228  00000000  00000000  00000cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d4c  00000000  00000000  00000ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e74  00000000  00000000  00002c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001017  00000000  00000000  00003aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000668  00000000  00000000  00004ab8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bdc  00000000  00000000  00005120  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010e7  00000000  00000000  00005cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b8  00000000  00000000  00006de3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	61 c0       	rjmp	.+194    	; 0xc4 <__ctors_end>
   2:	00 00       	nop
   4:	6f c0       	rjmp	.+222    	; 0xe4 <__bad_interrupt>
   6:	00 00       	nop
   8:	6d c0       	rjmp	.+218    	; 0xe4 <__bad_interrupt>
   a:	00 00       	nop
   c:	6b c0       	rjmp	.+214    	; 0xe4 <__bad_interrupt>
   e:	00 00       	nop
  10:	69 c0       	rjmp	.+210    	; 0xe4 <__bad_interrupt>
  12:	00 00       	nop
  14:	67 c0       	rjmp	.+206    	; 0xe4 <__bad_interrupt>
  16:	00 00       	nop
  18:	65 c0       	rjmp	.+202    	; 0xe4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	63 c0       	rjmp	.+198    	; 0xe4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	61 c0       	rjmp	.+194    	; 0xe4 <__bad_interrupt>
  22:	00 00       	nop
  24:	e7 c0       	rjmp	.+462    	; 0x1f4 <__vector_9>
  26:	00 00       	nop
  28:	89 c0       	rjmp	.+274    	; 0x13c <__vector_10>
  2a:	00 00       	nop
  2c:	0f c5       	rjmp	.+2590   	; 0xa4c <__vector_11>
  2e:	00 00       	nop
  30:	4b c2       	rjmp	.+1174   	; 0x4c8 <__vector_12>
  32:	00 00       	nop
  34:	57 c0       	rjmp	.+174    	; 0xe4 <__bad_interrupt>
  36:	00 00       	nop
  38:	eb c1       	rjmp	.+982    	; 0x410 <__vector_14>
  3a:	00 00       	nop
  3c:	90 c1       	rjmp	.+800    	; 0x35e <__vector_15>
  3e:	00 00       	nop
  40:	32 c1       	rjmp	.+612    	; 0x2a6 <__vector_16>
  42:	00 00       	nop
  44:	4f c0       	rjmp	.+158    	; 0xe4 <__bad_interrupt>
  46:	00 00       	nop
  48:	4d c0       	rjmp	.+154    	; 0xe4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4b c0       	rjmp	.+150    	; 0xe4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	49 c0       	rjmp	.+146    	; 0xe4 <__bad_interrupt>
  52:	00 00       	nop
  54:	47 c0       	rjmp	.+142    	; 0xe4 <__bad_interrupt>
  56:	00 00       	nop
  58:	45 c0       	rjmp	.+138    	; 0xe4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	43 c0       	rjmp	.+134    	; 0xe4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	41 c0       	rjmp	.+130    	; 0xe4 <__bad_interrupt>
  62:	00 00       	nop
  64:	20 c5       	rjmp	.+2624   	; 0xaa6 <__vector_25>
  66:	00 00       	nop
  68:	e5 c2       	rjmp	.+1482   	; 0x634 <__vector_26>
  6a:	00 00       	nop
  6c:	3b c0       	rjmp	.+118    	; 0xe4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	39 c0       	rjmp	.+114    	; 0xe4 <__bad_interrupt>
  72:	00 00       	nop
  74:	82 c2       	rjmp	.+1284   	; 0x57a <__vector_29>
  76:	00 00       	nop
  78:	35 c0       	rjmp	.+106    	; 0xe4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	33 c0       	rjmp	.+102    	; 0xe4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	31 c0       	rjmp	.+98     	; 0xe4 <__bad_interrupt>
  82:	00 00       	nop
  84:	2f c0       	rjmp	.+94     	; 0xe4 <__bad_interrupt>
  86:	00 00       	nop
  88:	2d c0       	rjmp	.+90     	; 0xe4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	82 03       	fmuls	r16, r18
  8e:	8d 03       	fmulsu	r16, r21
  90:	98 03       	fmulsu	r17, r16
  92:	a3 03       	fmuls	r18, r19
  94:	ae 03       	fmulsu	r18, r22
  96:	b9 03       	fmulsu	r19, r17
  98:	c6 03       	fmuls	r20, r22
  9a:	dc 03       	fmulsu	r21, r20
  9c:	e8 03       	fmulsu	r22, r16
  9e:	f4 03       	fmuls	r23, r20
  a0:	00 04       	cpc	r0, r0
  a2:	0c 04       	cpc	r0, r12
  a4:	18 04       	cpc	r1, r8
  a6:	26 04       	cpc	r2, r6
  a8:	43 04       	cpc	r4, r3
  aa:	4e 04       	cpc	r4, r14
  ac:	59 04       	cpc	r5, r9
  ae:	64 04       	cpc	r6, r4
  b0:	6f 04       	cpc	r6, r15
  b2:	7a 04       	cpc	r7, r10
  b4:	87 04       	cpc	r8, r7
  b6:	d5 04       	cpc	r13, r5
  b8:	e0 04       	cpc	r14, r0
  ba:	eb 04       	cpc	r14, r11
  bc:	f6 04       	cpc	r15, r6
  be:	01 05       	cpc	r16, r1
  c0:	0c 05       	cpc	r16, r12
  c2:	19 05       	cpc	r17, r9

000000c4 <__ctors_end>:
  c4:	11 24       	eor	r1, r1
  c6:	1f be       	out	0x3f, r1	; 63
  c8:	cf ef       	ldi	r28, 0xFF	; 255
  ca:	d0 e1       	ldi	r29, 0x10	; 16
  cc:	de bf       	out	0x3e, r29	; 62
  ce:	cd bf       	out	0x3d, r28	; 61

000000d0 <__do_clear_bss>:
  d0:	21 e0       	ldi	r18, 0x01	; 1
  d2:	a0 e0       	ldi	r26, 0x00	; 0
  d4:	b1 e0       	ldi	r27, 0x01	; 1
  d6:	01 c0       	rjmp	.+2      	; 0xda <.do_clear_bss_start>

000000d8 <.do_clear_bss_loop>:
  d8:	1d 92       	st	X+, r1

000000da <.do_clear_bss_start>:
  da:	a4 35       	cpi	r26, 0x54	; 84
  dc:	b2 07       	cpc	r27, r18
  de:	e1 f7       	brne	.-8      	; 0xd8 <.do_clear_bss_loop>
  e0:	02 d0       	rcall	.+4      	; 0xe6 <main>
  e2:	77 c5       	rjmp	.+2798   	; 0xbd2 <_exit>

000000e4 <__bad_interrupt>:
  e4:	8d cf       	rjmp	.-230    	; 0x0 <__vectors>

000000e6 <main>:

int main(void)
{
	// ENABLE
	
	DIO_SET_PIN_DIREC(DIO_PORTF , DIO_PIN1 ,DIO_OUTPUT);
  e6:	41 e0       	ldi	r20, 0x01	; 1
  e8:	61 e0       	ldi	r22, 0x01	; 1
  ea:	85 e0       	ldi	r24, 0x05	; 5
  ec:	fc d2       	rcall	.+1528   	; 0x6e6 <DIO_SET_PIN_DIREC>
	DIO_SET_PIN_VALUE(DIO_PORTF , DIO_PIN1 , DIO_HIGH);
  ee:	41 e0       	ldi	r20, 0x01	; 1
  f0:	61 e0       	ldi	r22, 0x01	; 1
  f2:	85 e0       	ldi	r24, 0x05	; 5
  f4:	b9 d3       	rcall	.+1906   	; 0x868 <DIO_SET_PIN_VALUE>
	
	DIO_SET_PIN_DIREC(DIO_PORTA , DIO_PIN0 , DIO_OUTPUT);
  f6:	41 e0       	ldi	r20, 0x01	; 1
  f8:	60 e0       	ldi	r22, 0x00	; 0
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	f4 d2       	rcall	.+1512   	; 0x6e6 <DIO_SET_PIN_DIREC>
	DIO_SET_PIN_DIREC(DIO_PORTA , DIO_PIN7 , DIO_OUTPUT);
  fe:	41 e0       	ldi	r20, 0x01	; 1
 100:	67 e0       	ldi	r22, 0x07	; 7
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	f0 d2       	rcall	.+1504   	; 0x6e6 <DIO_SET_PIN_DIREC>
	
	DIO_SET_PIN_VALUE(DIO_PORTA,DIO_PIN0,DIO_LOW);
 106:	40 e0       	ldi	r20, 0x00	; 0
 108:	60 e0       	ldi	r22, 0x00	; 0
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	ad d3       	rcall	.+1882   	; 0x868 <DIO_SET_PIN_VALUE>
	
	DIO_SET_PIN_VALUE(DIO_PORTA,DIO_PIN7,DIO_LOW);
 10e:	40 e0       	ldi	r20, 0x00	; 0
 110:	67 e0       	ldi	r22, 0x07	; 7
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	a9 d3       	rcall	.+1874   	; 0x868 <DIO_SET_PIN_VALUE>
	
	//TIMER_1_SET_TIME(15);

	//TIMER_1_START();
	
	TIMER_3_INT();
 116:	f4 d4       	rcall	.+2536   	; 0xb00 <TIMER_3_INT>
 118:	c0 e0       	ldi	r28, 0x00	; 0
    /* Replace with your application code */
    while (1) 
    {
		
		
       for (i =0 ; i < 100 ; i++)
 11a:	0d c0       	rjmp	.+26     	; 0x136 <main+0x50>
 11c:	8c 2f       	mov	r24, r28
	   {
		   TIMER_3_SET_DUTY_CYCLE(i);
 11e:	17 d5       	rcall	.+2606   	; 0xb4e <TIMER_3_SET_DUTY_CYCLE>
 120:	34 d5       	rcall	.+2664   	; 0xb8a <TIMER_3_DUTY_CYCLE_START>
 122:	2f ef       	ldi	r18, 0xFF	; 255
		   TIMER_3_DUTY_CYCLE_START ();
 124:	81 ee       	ldi	r24, 0xE1	; 225
 126:	94 e0       	ldi	r25, 0x04	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 128:	21 50       	subi	r18, 0x01	; 1
 12a:	80 40       	sbci	r24, 0x00	; 0
 12c:	90 40       	sbci	r25, 0x00	; 0
 12e:	e1 f7       	brne	.-8      	; 0x128 <main+0x42>
 130:	00 c0       	rjmp	.+0      	; 0x132 <main+0x4c>
 132:	00 00       	nop
 134:	cf 5f       	subi	r28, 0xFF	; 255
 136:	c4 36       	cpi	r28, 0x64	; 100
 138:	88 f3       	brcs	.-30     	; 0x11c <main+0x36>
    /* Replace with your application code */
    while (1) 
    {
		
		
       for (i =0 ; i < 100 ; i++)
 13a:	ee cf       	rjmp	.-36     	; 0x118 <main+0x32>

0000013c <__vector_10>:
 13c:	1f 92       	push	r1
 13e:	0f 92       	push	r0
 140:	0f b6       	in	r0, 0x3f	; 63
    }
}


ISR (TIMER2_OVF_vect)
{	
 142:	0f 92       	push	r0
 144:	11 24       	eor	r1, r1
 146:	0b b6       	in	r0, 0x3b	; 59
 148:	0f 92       	push	r0
 14a:	2f 93       	push	r18
 14c:	3f 93       	push	r19
 14e:	4f 93       	push	r20
 150:	5f 93       	push	r21
 152:	6f 93       	push	r22
 154:	7f 93       	push	r23
 156:	8f 93       	push	r24
 158:	9f 93       	push	r25
 15a:	af 93       	push	r26
 15c:	bf 93       	push	r27
 15e:	ef 93       	push	r30
 160:	ff 93       	push	r31
	Counter_OVERFLOW_TIMER_2 ++;
 162:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 166:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 16a:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 16e:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 172:	01 96       	adiw	r24, 0x01	; 1
 174:	a1 1d       	adc	r26, r1
 176:	b1 1d       	adc	r27, r1
 178:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 17c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 180:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 184:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	
	if (Counter_OVERFLOW_TIMER_2 == NUM_OVER_FLOW_TIMER_2)
 188:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 18c:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 190:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 194:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 198:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <NUM_OVER_FLOW_TIMER_2>
 19c:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <NUM_OVER_FLOW_TIMER_2+0x1>
 1a0:	a0 91 3e 01 	lds	r26, 0x013E	; 0x80013e <NUM_OVER_FLOW_TIMER_2+0x2>
 1a4:	b0 91 3f 01 	lds	r27, 0x013F	; 0x80013f <NUM_OVER_FLOW_TIMER_2+0x3>
 1a8:	48 17       	cp	r20, r24
 1aa:	59 07       	cpc	r21, r25
 1ac:	6a 07       	cpc	r22, r26
 1ae:	7b 07       	cpc	r23, r27
 1b0:	71 f4       	brne	.+28     	; 0x1ce <__vector_10+0x92>
	{
		Counter_OVERFLOW_TIMER_2 = 0;
 1b2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 1b6:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1ba:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1be:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
		DIO_TOOGLE_PIN(DIO_PORTA , DIO_PIN7);
 1c2:	67 e0       	ldi	r22, 0x07	; 7
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	e8 d3       	rcall	.+2000   	; 0x998 <DIO_TOOGLE_PIN>
		TCNT2 = STARTING_TICK_VALUE_TIMER_2;
 1c8:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <STARTING_TICK_VALUE_TIMER_2>
 1cc:	84 bd       	out	0x24, r24	; 36
	}
}
 1ce:	ff 91       	pop	r31
 1d0:	ef 91       	pop	r30
 1d2:	bf 91       	pop	r27
 1d4:	af 91       	pop	r26
 1d6:	9f 91       	pop	r25
 1d8:	8f 91       	pop	r24
 1da:	7f 91       	pop	r23
 1dc:	6f 91       	pop	r22
 1de:	5f 91       	pop	r21
 1e0:	4f 91       	pop	r20
 1e2:	3f 91       	pop	r19
 1e4:	2f 91       	pop	r18
 1e6:	0f 90       	pop	r0
 1e8:	0b be       	out	0x3b, r0	; 59
 1ea:	0f 90       	pop	r0
 1ec:	0f be       	out	0x3f, r0	; 63
 1ee:	0f 90       	pop	r0
 1f0:	1f 90       	pop	r1
 1f2:	18 95       	reti

000001f4 <__vector_9>:


ISR (TIMER2_COMP_vect)
{
 1f4:	1f 92       	push	r1
 1f6:	0f 92       	push	r0
 1f8:	0f b6       	in	r0, 0x3f	; 63
 1fa:	0f 92       	push	r0
 1fc:	11 24       	eor	r1, r1
 1fe:	0b b6       	in	r0, 0x3b	; 59
 200:	0f 92       	push	r0
 202:	2f 93       	push	r18
 204:	3f 93       	push	r19
 206:	4f 93       	push	r20
 208:	5f 93       	push	r21
 20a:	6f 93       	push	r22
 20c:	7f 93       	push	r23
 20e:	8f 93       	push	r24
 210:	9f 93       	push	r25
 212:	af 93       	push	r26
 214:	bf 93       	push	r27
 216:	ef 93       	push	r30
 218:	ff 93       	push	r31
	
	//DIO_TOOGLE_PIN(DIO_PORTA,DIO_PIN0);
	
	Counter_COMPARE_MATCH_TIMER_2 ++;
 21a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <Counter_COMPARE_MATCH_TIMER_2>
 21e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <Counter_COMPARE_MATCH_TIMER_2+0x1>
 222:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <Counter_COMPARE_MATCH_TIMER_2+0x2>
 226:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <Counter_COMPARE_MATCH_TIMER_2+0x3>
 22a:	01 96       	adiw	r24, 0x01	; 1
 22c:	a1 1d       	adc	r26, r1
 22e:	b1 1d       	adc	r27, r1
 230:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <Counter_COMPARE_MATCH_TIMER_2>
 234:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <Counter_COMPARE_MATCH_TIMER_2+0x1>
 238:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <Counter_COMPARE_MATCH_TIMER_2+0x2>
 23c:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <Counter_COMPARE_MATCH_TIMER_2+0x3>

	if (Counter_COMPARE_MATCH_TIMER_2 == COMPARE_MATCH_CTC_TIMER_2)
 240:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <Counter_COMPARE_MATCH_TIMER_2>
 244:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <Counter_COMPARE_MATCH_TIMER_2+0x1>
 248:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <Counter_COMPARE_MATCH_TIMER_2+0x2>
 24c:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <Counter_COMPARE_MATCH_TIMER_2+0x3>
 250:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <COMPARE_MATCH_CTC_TIMER_2>
 254:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <COMPARE_MATCH_CTC_TIMER_2+0x1>
 258:	a0 91 52 01 	lds	r26, 0x0152	; 0x800152 <COMPARE_MATCH_CTC_TIMER_2+0x2>
 25c:	b0 91 53 01 	lds	r27, 0x0153	; 0x800153 <COMPARE_MATCH_CTC_TIMER_2+0x3>
 260:	48 17       	cp	r20, r24
 262:	59 07       	cpc	r21, r25
 264:	6a 07       	cpc	r22, r26
 266:	7b 07       	cpc	r23, r27
 268:	59 f4       	brne	.+22     	; 0x280 <__vector_9+0x8c>
	{
		Counter_COMPARE_MATCH_TIMER_2 = 0;
 26a:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <Counter_COMPARE_MATCH_TIMER_2>
 26e:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <Counter_COMPARE_MATCH_TIMER_2+0x1>
 272:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <Counter_COMPARE_MATCH_TIMER_2+0x2>
 276:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <Counter_COMPARE_MATCH_TIMER_2+0x3>
		DIO_TOOGLE_PIN(DIO_PORTA , DIO_PIN7);
 27a:	67 e0       	ldi	r22, 0x07	; 7
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	8c d3       	rcall	.+1816   	; 0x998 <DIO_TOOGLE_PIN>
		
	}

}
 280:	ff 91       	pop	r31
 282:	ef 91       	pop	r30
 284:	bf 91       	pop	r27
 286:	af 91       	pop	r26
 288:	9f 91       	pop	r25
 28a:	8f 91       	pop	r24
 28c:	7f 91       	pop	r23
 28e:	6f 91       	pop	r22
 290:	5f 91       	pop	r21
 292:	4f 91       	pop	r20
 294:	3f 91       	pop	r19
 296:	2f 91       	pop	r18
 298:	0f 90       	pop	r0
 29a:	0b be       	out	0x3b, r0	; 59
 29c:	0f 90       	pop	r0
 29e:	0f be       	out	0x3f, r0	; 63
 2a0:	0f 90       	pop	r0
 2a2:	1f 90       	pop	r1
 2a4:	18 95       	reti

000002a6 <__vector_16>:


ISR (TIMER0_OVF_vect)
{
 2a6:	1f 92       	push	r1
 2a8:	0f 92       	push	r0
 2aa:	0f b6       	in	r0, 0x3f	; 63
 2ac:	0f 92       	push	r0
 2ae:	11 24       	eor	r1, r1
 2b0:	0b b6       	in	r0, 0x3b	; 59
 2b2:	0f 92       	push	r0
 2b4:	2f 93       	push	r18
 2b6:	3f 93       	push	r19
 2b8:	4f 93       	push	r20
 2ba:	5f 93       	push	r21
 2bc:	6f 93       	push	r22
 2be:	7f 93       	push	r23
 2c0:	8f 93       	push	r24
 2c2:	9f 93       	push	r25
 2c4:	af 93       	push	r26
 2c6:	bf 93       	push	r27
 2c8:	ef 93       	push	r30
 2ca:	ff 93       	push	r31
	Counter_OVERFLOW_TIMER_0 ++;
 2cc:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <Counter_OVERFLOW_TIMER_0>
 2d0:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <Counter_OVERFLOW_TIMER_0+0x1>
 2d4:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <Counter_OVERFLOW_TIMER_0+0x2>
 2d8:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <Counter_OVERFLOW_TIMER_0+0x3>
 2dc:	01 96       	adiw	r24, 0x01	; 1
 2de:	a1 1d       	adc	r26, r1
 2e0:	b1 1d       	adc	r27, r1
 2e2:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <Counter_OVERFLOW_TIMER_0>
 2e6:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <Counter_OVERFLOW_TIMER_0+0x1>
 2ea:	a0 93 1a 01 	sts	0x011A, r26	; 0x80011a <Counter_OVERFLOW_TIMER_0+0x2>
 2ee:	b0 93 1b 01 	sts	0x011B, r27	; 0x80011b <Counter_OVERFLOW_TIMER_0+0x3>
	
	if (Counter_OVERFLOW_TIMER_0 == NUM_OVER_FLOW_TIMER_0)
 2f2:	40 91 18 01 	lds	r20, 0x0118	; 0x800118 <Counter_OVERFLOW_TIMER_0>
 2f6:	50 91 19 01 	lds	r21, 0x0119	; 0x800119 <Counter_OVERFLOW_TIMER_0+0x1>
 2fa:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <Counter_OVERFLOW_TIMER_0+0x2>
 2fe:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <Counter_OVERFLOW_TIMER_0+0x3>
 302:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <NUM_OVER_FLOW_TIMER_0>
 306:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <NUM_OVER_FLOW_TIMER_0+0x1>
 30a:	a0 91 2a 01 	lds	r26, 0x012A	; 0x80012a <NUM_OVER_FLOW_TIMER_0+0x2>
 30e:	b0 91 2b 01 	lds	r27, 0x012B	; 0x80012b <NUM_OVER_FLOW_TIMER_0+0x3>
 312:	48 17       	cp	r20, r24
 314:	59 07       	cpc	r21, r25
 316:	6a 07       	cpc	r22, r26
 318:	7b 07       	cpc	r23, r27
 31a:	71 f4       	brne	.+28     	; 0x338 <__vector_16+0x92>
	{
		Counter_OVERFLOW_TIMER_0 = 0;
 31c:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <Counter_OVERFLOW_TIMER_0>
 320:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <Counter_OVERFLOW_TIMER_0+0x1>
 324:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <Counter_OVERFLOW_TIMER_0+0x2>
 328:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <Counter_OVERFLOW_TIMER_0+0x3>
		DIO_TOOGLE_PIN(DIO_PORTA , DIO_PIN0);
 32c:	60 e0       	ldi	r22, 0x00	; 0
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	33 d3       	rcall	.+1638   	; 0x998 <DIO_TOOGLE_PIN>
		TCNT0 = STARTING_TICK_VALUE_TIMER_0;
 332:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <STARTING_TICK_VALUE_TIMER_0>
 336:	82 bf       	out	0x32, r24	; 50
	}
}
 338:	ff 91       	pop	r31
 33a:	ef 91       	pop	r30
 33c:	bf 91       	pop	r27
 33e:	af 91       	pop	r26
 340:	9f 91       	pop	r25
 342:	8f 91       	pop	r24
 344:	7f 91       	pop	r23
 346:	6f 91       	pop	r22
 348:	5f 91       	pop	r21
 34a:	4f 91       	pop	r20
 34c:	3f 91       	pop	r19
 34e:	2f 91       	pop	r18
 350:	0f 90       	pop	r0
 352:	0b be       	out	0x3b, r0	; 59
 354:	0f 90       	pop	r0
 356:	0f be       	out	0x3f, r0	; 63
 358:	0f 90       	pop	r0
 35a:	1f 90       	pop	r1
 35c:	18 95       	reti

0000035e <__vector_15>:


ISR (TIMER0_COMP_vect)
{
 35e:	1f 92       	push	r1
 360:	0f 92       	push	r0
 362:	0f b6       	in	r0, 0x3f	; 63
 364:	0f 92       	push	r0
 366:	11 24       	eor	r1, r1
 368:	0b b6       	in	r0, 0x3b	; 59
 36a:	0f 92       	push	r0
 36c:	2f 93       	push	r18
 36e:	3f 93       	push	r19
 370:	4f 93       	push	r20
 372:	5f 93       	push	r21
 374:	6f 93       	push	r22
 376:	7f 93       	push	r23
 378:	8f 93       	push	r24
 37a:	9f 93       	push	r25
 37c:	af 93       	push	r26
 37e:	bf 93       	push	r27
 380:	ef 93       	push	r30
 382:	ff 93       	push	r31
	
	//DIO_TOOGLE_PIN(DIO_PORTA,DIO_PIN0);
	
	Counter_COMPARE_MATCH_TIMER_0 ++;
 384:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <Counter_COMPARE_MATCH_TIMER_0>
 388:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <Counter_COMPARE_MATCH_TIMER_0+0x1>
 38c:	a0 91 1e 01 	lds	r26, 0x011E	; 0x80011e <Counter_COMPARE_MATCH_TIMER_0+0x2>
 390:	b0 91 1f 01 	lds	r27, 0x011F	; 0x80011f <Counter_COMPARE_MATCH_TIMER_0+0x3>
 394:	01 96       	adiw	r24, 0x01	; 1
 396:	a1 1d       	adc	r26, r1
 398:	b1 1d       	adc	r27, r1
 39a:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <Counter_COMPARE_MATCH_TIMER_0>
 39e:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <Counter_COMPARE_MATCH_TIMER_0+0x1>
 3a2:	a0 93 1e 01 	sts	0x011E, r26	; 0x80011e <Counter_COMPARE_MATCH_TIMER_0+0x2>
 3a6:	b0 93 1f 01 	sts	0x011F, r27	; 0x80011f <Counter_COMPARE_MATCH_TIMER_0+0x3>

	if (Counter_COMPARE_MATCH_TIMER_0 == COMPARE_MATCH_CTC_TIMER_0)
 3aa:	40 91 1c 01 	lds	r20, 0x011C	; 0x80011c <Counter_COMPARE_MATCH_TIMER_0>
 3ae:	50 91 1d 01 	lds	r21, 0x011D	; 0x80011d <Counter_COMPARE_MATCH_TIMER_0+0x1>
 3b2:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <Counter_COMPARE_MATCH_TIMER_0+0x2>
 3b6:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <Counter_COMPARE_MATCH_TIMER_0+0x3>
 3ba:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <COMPARE_MATCH_CTC_TIMER_0>
 3be:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <COMPARE_MATCH_CTC_TIMER_0+0x1>
 3c2:	a0 91 4e 01 	lds	r26, 0x014E	; 0x80014e <COMPARE_MATCH_CTC_TIMER_0+0x2>
 3c6:	b0 91 4f 01 	lds	r27, 0x014F	; 0x80014f <COMPARE_MATCH_CTC_TIMER_0+0x3>
 3ca:	48 17       	cp	r20, r24
 3cc:	59 07       	cpc	r21, r25
 3ce:	6a 07       	cpc	r22, r26
 3d0:	7b 07       	cpc	r23, r27
 3d2:	59 f4       	brne	.+22     	; 0x3ea <__vector_15+0x8c>
	{
		Counter_COMPARE_MATCH_TIMER_0 = 0;
 3d4:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <Counter_COMPARE_MATCH_TIMER_0>
 3d8:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <Counter_COMPARE_MATCH_TIMER_0+0x1>
 3dc:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <Counter_COMPARE_MATCH_TIMER_0+0x2>
 3e0:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <Counter_COMPARE_MATCH_TIMER_0+0x3>
		DIO_TOOGLE_PIN(DIO_PORTA , DIO_PIN0);
 3e4:	60 e0       	ldi	r22, 0x00	; 0
 3e6:	80 e0       	ldi	r24, 0x00	; 0
 3e8:	d7 d2       	rcall	.+1454   	; 0x998 <DIO_TOOGLE_PIN>
		
	}

}
 3ea:	ff 91       	pop	r31
 3ec:	ef 91       	pop	r30
 3ee:	bf 91       	pop	r27
 3f0:	af 91       	pop	r26
 3f2:	9f 91       	pop	r25
 3f4:	8f 91       	pop	r24
 3f6:	7f 91       	pop	r23
 3f8:	6f 91       	pop	r22
 3fa:	5f 91       	pop	r21
 3fc:	4f 91       	pop	r20
 3fe:	3f 91       	pop	r19
 400:	2f 91       	pop	r18
 402:	0f 90       	pop	r0
 404:	0b be       	out	0x3b, r0	; 59
 406:	0f 90       	pop	r0
 408:	0f be       	out	0x3f, r0	; 63
 40a:	0f 90       	pop	r0
 40c:	1f 90       	pop	r1
 40e:	18 95       	reti

00000410 <__vector_14>:



ISR (TIMER1_OVF_vect)
{
 410:	1f 92       	push	r1
 412:	0f 92       	push	r0
 414:	0f b6       	in	r0, 0x3f	; 63
 416:	0f 92       	push	r0
 418:	11 24       	eor	r1, r1
 41a:	0b b6       	in	r0, 0x3b	; 59
 41c:	0f 92       	push	r0
 41e:	2f 93       	push	r18
 420:	3f 93       	push	r19
 422:	4f 93       	push	r20
 424:	5f 93       	push	r21
 426:	6f 93       	push	r22
 428:	7f 93       	push	r23
 42a:	8f 93       	push	r24
 42c:	9f 93       	push	r25
 42e:	af 93       	push	r26
 430:	bf 93       	push	r27
 432:	ef 93       	push	r30
 434:	ff 93       	push	r31
	Counter_OVERFLOW_TIMER_1 ++;
 436:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <Counter_OVERFLOW_TIMER_1>
 43a:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <Counter_OVERFLOW_TIMER_1+0x1>
 43e:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <Counter_OVERFLOW_TIMER_1+0x2>
 442:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <Counter_OVERFLOW_TIMER_1+0x3>
 446:	01 96       	adiw	r24, 0x01	; 1
 448:	a1 1d       	adc	r26, r1
 44a:	b1 1d       	adc	r27, r1
 44c:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <Counter_OVERFLOW_TIMER_1>
 450:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <Counter_OVERFLOW_TIMER_1+0x1>
 454:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <Counter_OVERFLOW_TIMER_1+0x2>
 458:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <Counter_OVERFLOW_TIMER_1+0x3>
	
	if (Counter_OVERFLOW_TIMER_1 == NUM_OVER_FLOW_TIMER_1)
 45c:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <Counter_OVERFLOW_TIMER_1>
 460:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <Counter_OVERFLOW_TIMER_1+0x1>
 464:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <Counter_OVERFLOW_TIMER_1+0x2>
 468:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <Counter_OVERFLOW_TIMER_1+0x3>
 46c:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <NUM_OVER_FLOW_TIMER_1>
 470:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <NUM_OVER_FLOW_TIMER_1+0x1>
 474:	a0 91 36 01 	lds	r26, 0x0136	; 0x800136 <NUM_OVER_FLOW_TIMER_1+0x2>
 478:	b0 91 37 01 	lds	r27, 0x0137	; 0x800137 <NUM_OVER_FLOW_TIMER_1+0x3>
 47c:	48 17       	cp	r20, r24
 47e:	59 07       	cpc	r21, r25
 480:	6a 07       	cpc	r22, r26
 482:	7b 07       	cpc	r23, r27
 484:	71 f4       	brne	.+28     	; 0x4a2 <__vector_14+0x92>
	{
		Counter_OVERFLOW_TIMER_1 = 0;
 486:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <Counter_OVERFLOW_TIMER_1>
 48a:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <Counter_OVERFLOW_TIMER_1+0x1>
 48e:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <Counter_OVERFLOW_TIMER_1+0x2>
 492:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <Counter_OVERFLOW_TIMER_1+0x3>
		DIO_TOOGLE_PIN(DIO_PORTA , DIO_PIN0);
 496:	60 e0       	ldi	r22, 0x00	; 0
 498:	80 e0       	ldi	r24, 0x00	; 0
 49a:	7e d2       	rcall	.+1276   	; 0x998 <DIO_TOOGLE_PIN>
		TCNT1L = STARTING_TICK_VALUE_TIMER_1;
 49c:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <STARTING_TICK_VALUE_TIMER_1>
 4a0:	8c bd       	out	0x2c, r24	; 44
	}
}
 4a2:	ff 91       	pop	r31
 4a4:	ef 91       	pop	r30
 4a6:	bf 91       	pop	r27
 4a8:	af 91       	pop	r26
 4aa:	9f 91       	pop	r25
 4ac:	8f 91       	pop	r24
 4ae:	7f 91       	pop	r23
 4b0:	6f 91       	pop	r22
 4b2:	5f 91       	pop	r21
 4b4:	4f 91       	pop	r20
 4b6:	3f 91       	pop	r19
 4b8:	2f 91       	pop	r18
 4ba:	0f 90       	pop	r0
 4bc:	0b be       	out	0x3b, r0	; 59
 4be:	0f 90       	pop	r0
 4c0:	0f be       	out	0x3f, r0	; 63
 4c2:	0f 90       	pop	r0
 4c4:	1f 90       	pop	r1
 4c6:	18 95       	reti

000004c8 <__vector_12>:


ISR (TIMER1_COMPA_vect)
{
 4c8:	1f 92       	push	r1
 4ca:	0f 92       	push	r0
 4cc:	0f b6       	in	r0, 0x3f	; 63
 4ce:	0f 92       	push	r0
 4d0:	11 24       	eor	r1, r1
 4d2:	0b b6       	in	r0, 0x3b	; 59
 4d4:	0f 92       	push	r0
 4d6:	2f 93       	push	r18
 4d8:	3f 93       	push	r19
 4da:	4f 93       	push	r20
 4dc:	5f 93       	push	r21
 4de:	6f 93       	push	r22
 4e0:	7f 93       	push	r23
 4e2:	8f 93       	push	r24
 4e4:	9f 93       	push	r25
 4e6:	af 93       	push	r26
 4e8:	bf 93       	push	r27
 4ea:	ef 93       	push	r30
 4ec:	ff 93       	push	r31
	
	//DIO_TOOGLE_PIN(DIO_PORTA,DIO_PIN0);
	
	Counter_COMPARE_MATCH_TIMER_1 ++;
 4ee:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <Counter_COMPARE_MATCH_TIMER_1>
 4f2:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <Counter_COMPARE_MATCH_TIMER_1+0x1>
 4f6:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <Counter_COMPARE_MATCH_TIMER_1+0x2>
 4fa:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <Counter_COMPARE_MATCH_TIMER_1+0x3>
 4fe:	01 96       	adiw	r24, 0x01	; 1
 500:	a1 1d       	adc	r26, r1
 502:	b1 1d       	adc	r27, r1
 504:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <Counter_COMPARE_MATCH_TIMER_1>
 508:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <Counter_COMPARE_MATCH_TIMER_1+0x1>
 50c:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <Counter_COMPARE_MATCH_TIMER_1+0x2>
 510:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <Counter_COMPARE_MATCH_TIMER_1+0x3>

	if (Counter_COMPARE_MATCH_TIMER_1 == COMPARE_MATCH_CTC_TIMER_1)
 514:	40 91 14 01 	lds	r20, 0x0114	; 0x800114 <Counter_COMPARE_MATCH_TIMER_1>
 518:	50 91 15 01 	lds	r21, 0x0115	; 0x800115 <Counter_COMPARE_MATCH_TIMER_1+0x1>
 51c:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <Counter_COMPARE_MATCH_TIMER_1+0x2>
 520:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <Counter_COMPARE_MATCH_TIMER_1+0x3>
 524:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <COMPARE_MATCH_CTC_TIMER_1>
 528:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <COMPARE_MATCH_CTC_TIMER_1+0x1>
 52c:	a0 91 2e 01 	lds	r26, 0x012E	; 0x80012e <COMPARE_MATCH_CTC_TIMER_1+0x2>
 530:	b0 91 2f 01 	lds	r27, 0x012F	; 0x80012f <COMPARE_MATCH_CTC_TIMER_1+0x3>
 534:	48 17       	cp	r20, r24
 536:	59 07       	cpc	r21, r25
 538:	6a 07       	cpc	r22, r26
 53a:	7b 07       	cpc	r23, r27
 53c:	59 f4       	brne	.+22     	; 0x554 <__vector_12+0x8c>
	{
		Counter_COMPARE_MATCH_TIMER_1 = 0;
 53e:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <Counter_COMPARE_MATCH_TIMER_1>
 542:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <Counter_COMPARE_MATCH_TIMER_1+0x1>
 546:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <Counter_COMPARE_MATCH_TIMER_1+0x2>
 54a:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <Counter_COMPARE_MATCH_TIMER_1+0x3>
		DIO_TOOGLE_PIN(DIO_PORTA , DIO_PIN0);
 54e:	60 e0       	ldi	r22, 0x00	; 0
 550:	80 e0       	ldi	r24, 0x00	; 0
 552:	22 d2       	rcall	.+1092   	; 0x998 <DIO_TOOGLE_PIN>
		
	}

}
 554:	ff 91       	pop	r31
 556:	ef 91       	pop	r30
 558:	bf 91       	pop	r27
 55a:	af 91       	pop	r26
 55c:	9f 91       	pop	r25
 55e:	8f 91       	pop	r24
 560:	7f 91       	pop	r23
 562:	6f 91       	pop	r22
 564:	5f 91       	pop	r21
 566:	4f 91       	pop	r20
 568:	3f 91       	pop	r19
 56a:	2f 91       	pop	r18
 56c:	0f 90       	pop	r0
 56e:	0b be       	out	0x3b, r0	; 59
 570:	0f 90       	pop	r0
 572:	0f be       	out	0x3f, r0	; 63
 574:	0f 90       	pop	r0
 576:	1f 90       	pop	r1
 578:	18 95       	reti

0000057a <__vector_29>:


ISR (TIMER3_OVF_vect)
{
 57a:	1f 92       	push	r1
 57c:	0f 92       	push	r0
 57e:	0f b6       	in	r0, 0x3f	; 63
 580:	0f 92       	push	r0
 582:	11 24       	eor	r1, r1
 584:	0b b6       	in	r0, 0x3b	; 59
 586:	0f 92       	push	r0
 588:	2f 93       	push	r18
 58a:	3f 93       	push	r19
 58c:	4f 93       	push	r20
 58e:	5f 93       	push	r21
 590:	6f 93       	push	r22
 592:	7f 93       	push	r23
 594:	8f 93       	push	r24
 596:	9f 93       	push	r25
 598:	af 93       	push	r26
 59a:	bf 93       	push	r27
 59c:	ef 93       	push	r30
 59e:	ff 93       	push	r31
	Counter_OVERFLOW_TIMER_3 ++;
 5a0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <Counter_OVERFLOW_TIMER_3>
 5a4:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <Counter_OVERFLOW_TIMER_3+0x1>
 5a8:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <Counter_OVERFLOW_TIMER_3+0x2>
 5ac:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <Counter_OVERFLOW_TIMER_3+0x3>
 5b0:	01 96       	adiw	r24, 0x01	; 1
 5b2:	a1 1d       	adc	r26, r1
 5b4:	b1 1d       	adc	r27, r1
 5b6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <Counter_OVERFLOW_TIMER_3>
 5ba:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <Counter_OVERFLOW_TIMER_3+0x1>
 5be:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <Counter_OVERFLOW_TIMER_3+0x2>
 5c2:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <Counter_OVERFLOW_TIMER_3+0x3>
	
	if (Counter_OVERFLOW_TIMER_3 == NUM_OVER_FLOW_TIMER_3)
 5c6:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <Counter_OVERFLOW_TIMER_3>
 5ca:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <Counter_OVERFLOW_TIMER_3+0x1>
 5ce:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <Counter_OVERFLOW_TIMER_3+0x2>
 5d2:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <Counter_OVERFLOW_TIMER_3+0x3>
 5d6:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <NUM_OVER_FLOW_TIMER_3>
 5da:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <NUM_OVER_FLOW_TIMER_3+0x1>
 5de:	a0 91 4a 01 	lds	r26, 0x014A	; 0x80014a <NUM_OVER_FLOW_TIMER_3+0x2>
 5e2:	b0 91 4b 01 	lds	r27, 0x014B	; 0x80014b <NUM_OVER_FLOW_TIMER_3+0x3>
 5e6:	48 17       	cp	r20, r24
 5e8:	59 07       	cpc	r21, r25
 5ea:	6a 07       	cpc	r22, r26
 5ec:	7b 07       	cpc	r23, r27
 5ee:	79 f4       	brne	.+30     	; 0x60e <__vector_29+0x94>
	{
		Counter_OVERFLOW_TIMER_3 = 0;
 5f0:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <Counter_OVERFLOW_TIMER_3>
 5f4:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <Counter_OVERFLOW_TIMER_3+0x1>
 5f8:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <Counter_OVERFLOW_TIMER_3+0x2>
 5fc:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <Counter_OVERFLOW_TIMER_3+0x3>
		DIO_TOOGLE_PIN(DIO_PORTA , DIO_PIN0);
 600:	60 e0       	ldi	r22, 0x00	; 0
 602:	80 e0       	ldi	r24, 0x00	; 0
 604:	c9 d1       	rcall	.+914    	; 0x998 <DIO_TOOGLE_PIN>
		TCNT3L = STARTING_TICK_VALUE_TIMER_3;
 606:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <STARTING_TICK_VALUE_TIMER_3>
 60a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	}
}
 60e:	ff 91       	pop	r31
 610:	ef 91       	pop	r30
 612:	bf 91       	pop	r27
 614:	af 91       	pop	r26
 616:	9f 91       	pop	r25
 618:	8f 91       	pop	r24
 61a:	7f 91       	pop	r23
 61c:	6f 91       	pop	r22
 61e:	5f 91       	pop	r21
 620:	4f 91       	pop	r20
 622:	3f 91       	pop	r19
 624:	2f 91       	pop	r18
 626:	0f 90       	pop	r0
 628:	0b be       	out	0x3b, r0	; 59
 62a:	0f 90       	pop	r0
 62c:	0f be       	out	0x3f, r0	; 63
 62e:	0f 90       	pop	r0
 630:	1f 90       	pop	r1
 632:	18 95       	reti

00000634 <__vector_26>:


ISR (TIMER3_COMPA_vect)
{
 634:	1f 92       	push	r1
 636:	0f 92       	push	r0
 638:	0f b6       	in	r0, 0x3f	; 63
 63a:	0f 92       	push	r0
 63c:	11 24       	eor	r1, r1
 63e:	0b b6       	in	r0, 0x3b	; 59
 640:	0f 92       	push	r0
 642:	2f 93       	push	r18
 644:	3f 93       	push	r19
 646:	4f 93       	push	r20
 648:	5f 93       	push	r21
 64a:	6f 93       	push	r22
 64c:	7f 93       	push	r23
 64e:	8f 93       	push	r24
 650:	9f 93       	push	r25
 652:	af 93       	push	r26
 654:	bf 93       	push	r27
 656:	ef 93       	push	r30
 658:	ff 93       	push	r31
	
	//DIO_TOOGLE_PIN(DIO_PORTA,DIO_PIN0);
	
	Counter_COMPARE_MATCH_TIMER_3 ++;
 65a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <Counter_COMPARE_MATCH_TIMER_3>
 65e:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <Counter_COMPARE_MATCH_TIMER_3+0x1>
 662:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <Counter_COMPARE_MATCH_TIMER_3+0x2>
 666:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <Counter_COMPARE_MATCH_TIMER_3+0x3>
 66a:	01 96       	adiw	r24, 0x01	; 1
 66c:	a1 1d       	adc	r26, r1
 66e:	b1 1d       	adc	r27, r1
 670:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <Counter_COMPARE_MATCH_TIMER_3>
 674:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <Counter_COMPARE_MATCH_TIMER_3+0x1>
 678:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <Counter_COMPARE_MATCH_TIMER_3+0x2>
 67c:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <Counter_COMPARE_MATCH_TIMER_3+0x3>

	if (Counter_COMPARE_MATCH_TIMER_3 == COMPARE_MATCH_CTC_TIMER_3)
 680:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <Counter_COMPARE_MATCH_TIMER_3>
 684:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <Counter_COMPARE_MATCH_TIMER_3+0x1>
 688:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <Counter_COMPARE_MATCH_TIMER_3+0x2>
 68c:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <Counter_COMPARE_MATCH_TIMER_3+0x3>
 690:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <COMPARE_MATCH_CTC_TIMER_3>
 694:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <COMPARE_MATCH_CTC_TIMER_3+0x1>
 698:	a0 91 42 01 	lds	r26, 0x0142	; 0x800142 <COMPARE_MATCH_CTC_TIMER_3+0x2>
 69c:	b0 91 43 01 	lds	r27, 0x0143	; 0x800143 <COMPARE_MATCH_CTC_TIMER_3+0x3>
 6a0:	48 17       	cp	r20, r24
 6a2:	59 07       	cpc	r21, r25
 6a4:	6a 07       	cpc	r22, r26
 6a6:	7b 07       	cpc	r23, r27
 6a8:	59 f4       	brne	.+22     	; 0x6c0 <__vector_26+0x8c>
	{
		Counter_COMPARE_MATCH_TIMER_3 = 0;
 6aa:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <Counter_COMPARE_MATCH_TIMER_3>
 6ae:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <Counter_COMPARE_MATCH_TIMER_3+0x1>
 6b2:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <Counter_COMPARE_MATCH_TIMER_3+0x2>
 6b6:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <Counter_COMPARE_MATCH_TIMER_3+0x3>
		DIO_TOOGLE_PIN(DIO_PORTA , DIO_PIN0);
 6ba:	60 e0       	ldi	r22, 0x00	; 0
 6bc:	80 e0       	ldi	r24, 0x00	; 0
 6be:	6c d1       	rcall	.+728    	; 0x998 <DIO_TOOGLE_PIN>
		
	}

 6c0:	ff 91       	pop	r31
 6c2:	ef 91       	pop	r30
 6c4:	bf 91       	pop	r27
 6c6:	af 91       	pop	r26
 6c8:	9f 91       	pop	r25
 6ca:	8f 91       	pop	r24
 6cc:	7f 91       	pop	r23
 6ce:	6f 91       	pop	r22
 6d0:	5f 91       	pop	r21
 6d2:	4f 91       	pop	r20
 6d4:	3f 91       	pop	r19
 6d6:	2f 91       	pop	r18
 6d8:	0f 90       	pop	r0
 6da:	0b be       	out	0x3b, r0	; 59
 6dc:	0f 90       	pop	r0
 6de:	0f be       	out	0x3f, r0	; 63
 6e0:	0f 90       	pop	r0
 6e2:	1f 90       	pop	r1
 6e4:	18 95       	reti

000006e6 <DIO_SET_PIN_DIREC>:
		
		break;
		
		case DIO_PORTG:
		
		*VALUE = GET_BIT(PING,PIN);
 6e6:	44 23       	and	r20, r20
 6e8:	09 f4       	brne	.+2      	; 0x6ec <DIO_SET_PIN_DIREC+0x6>
 6ea:	5d c0       	rjmp	.+186    	; 0x7a6 <DIO_SET_PIN_DIREC+0xc0>
 6ec:	41 30       	cpi	r20, 0x01	; 1
 6ee:	09 f0       	breq	.+2      	; 0x6f2 <DIO_SET_PIN_DIREC+0xc>
 6f0:	ba c0       	rjmp	.+372    	; 0x866 <DIO_SET_PIN_DIREC+0x180>
 6f2:	90 e0       	ldi	r25, 0x00	; 0
 6f4:	87 30       	cpi	r24, 0x07	; 7
 6f6:	91 05       	cpc	r25, r1
 6f8:	08 f0       	brcs	.+2      	; 0x6fc <DIO_SET_PIN_DIREC+0x16>
 6fa:	b5 c0       	rjmp	.+362    	; 0x866 <DIO_SET_PIN_DIREC+0x180>
 6fc:	fc 01       	movw	r30, r24
 6fe:	ea 5b       	subi	r30, 0xBA	; 186
 700:	ff 4f       	sbci	r31, 0xFF	; 255
 702:	4f c2       	rjmp	.+1182   	; 0xba2 <__tablejump2__>
 704:	2a b3       	in	r18, 0x1a	; 26
 706:	81 e0       	ldi	r24, 0x01	; 1
 708:	90 e0       	ldi	r25, 0x00	; 0
 70a:	02 c0       	rjmp	.+4      	; 0x710 <DIO_SET_PIN_DIREC+0x2a>
 70c:	88 0f       	add	r24, r24
 70e:	99 1f       	adc	r25, r25
 710:	6a 95       	dec	r22
 712:	e2 f7       	brpl	.-8      	; 0x70c <DIO_SET_PIN_DIREC+0x26>
 714:	82 2b       	or	r24, r18
 716:	8a bb       	out	0x1a, r24	; 26
 718:	08 95       	ret
 71a:	27 b3       	in	r18, 0x17	; 23
 71c:	81 e0       	ldi	r24, 0x01	; 1
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	02 c0       	rjmp	.+4      	; 0x726 <DIO_SET_PIN_DIREC+0x40>
 722:	88 0f       	add	r24, r24
 724:	99 1f       	adc	r25, r25
 726:	6a 95       	dec	r22
 728:	e2 f7       	brpl	.-8      	; 0x722 <DIO_SET_PIN_DIREC+0x3c>
 72a:	82 2b       	or	r24, r18
 72c:	87 bb       	out	0x17, r24	; 23
 72e:	08 95       	ret
 730:	24 b3       	in	r18, 0x14	; 20
 732:	81 e0       	ldi	r24, 0x01	; 1
 734:	90 e0       	ldi	r25, 0x00	; 0
 736:	02 c0       	rjmp	.+4      	; 0x73c <DIO_SET_PIN_DIREC+0x56>
 738:	88 0f       	add	r24, r24
 73a:	99 1f       	adc	r25, r25
 73c:	6a 95       	dec	r22
 73e:	e2 f7       	brpl	.-8      	; 0x738 <DIO_SET_PIN_DIREC+0x52>
 740:	82 2b       	or	r24, r18
 742:	84 bb       	out	0x14, r24	; 20
 744:	08 95       	ret
 746:	21 b3       	in	r18, 0x11	; 17
 748:	81 e0       	ldi	r24, 0x01	; 1
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	02 c0       	rjmp	.+4      	; 0x752 <DIO_SET_PIN_DIREC+0x6c>
 74e:	88 0f       	add	r24, r24
 750:	99 1f       	adc	r25, r25
 752:	6a 95       	dec	r22
 754:	e2 f7       	brpl	.-8      	; 0x74e <DIO_SET_PIN_DIREC+0x68>
 756:	82 2b       	or	r24, r18
 758:	81 bb       	out	0x11, r24	; 17
 75a:	08 95       	ret
 75c:	22 b1       	in	r18, 0x02	; 2
 75e:	81 e0       	ldi	r24, 0x01	; 1
 760:	90 e0       	ldi	r25, 0x00	; 0
 762:	02 c0       	rjmp	.+4      	; 0x768 <DIO_SET_PIN_DIREC+0x82>
 764:	88 0f       	add	r24, r24
 766:	99 1f       	adc	r25, r25
 768:	6a 95       	dec	r22
 76a:	e2 f7       	brpl	.-8      	; 0x764 <DIO_SET_PIN_DIREC+0x7e>
 76c:	82 2b       	or	r24, r18
 76e:	82 b9       	out	0x02, r24	; 2
 770:	08 95       	ret
 772:	e1 e6       	ldi	r30, 0x61	; 97
 774:	f0 e0       	ldi	r31, 0x00	; 0
 776:	20 81       	ld	r18, Z
 778:	81 e0       	ldi	r24, 0x01	; 1
 77a:	90 e0       	ldi	r25, 0x00	; 0
 77c:	02 c0       	rjmp	.+4      	; 0x782 <DIO_SET_PIN_DIREC+0x9c>
 77e:	88 0f       	add	r24, r24
 780:	99 1f       	adc	r25, r25
 782:	6a 95       	dec	r22
 784:	e2 f7       	brpl	.-8      	; 0x77e <DIO_SET_PIN_DIREC+0x98>
 786:	82 2b       	or	r24, r18
 788:	80 83       	st	Z, r24
 78a:	08 95       	ret
 78c:	e4 e6       	ldi	r30, 0x64	; 100
 78e:	f0 e0       	ldi	r31, 0x00	; 0
 790:	20 81       	ld	r18, Z
 792:	81 e0       	ldi	r24, 0x01	; 1
 794:	90 e0       	ldi	r25, 0x00	; 0
 796:	02 c0       	rjmp	.+4      	; 0x79c <DIO_SET_PIN_DIREC+0xb6>
 798:	88 0f       	add	r24, r24
 79a:	99 1f       	adc	r25, r25
 79c:	6a 95       	dec	r22
 79e:	e2 f7       	brpl	.-8      	; 0x798 <DIO_SET_PIN_DIREC+0xb2>
 7a0:	82 2b       	or	r24, r18
 7a2:	80 83       	st	Z, r24
 7a4:	08 95       	ret
 7a6:	90 e0       	ldi	r25, 0x00	; 0
 7a8:	87 30       	cpi	r24, 0x07	; 7
 7aa:	91 05       	cpc	r25, r1
 7ac:	08 f0       	brcs	.+2      	; 0x7b0 <DIO_SET_PIN_DIREC+0xca>
 7ae:	5b c0       	rjmp	.+182    	; 0x866 <DIO_SET_PIN_DIREC+0x180>
 7b0:	fc 01       	movw	r30, r24
 7b2:	e3 5b       	subi	r30, 0xB3	; 179
 7b4:	ff 4f       	sbci	r31, 0xFF	; 255
 7b6:	f5 c1       	rjmp	.+1002   	; 0xba2 <__tablejump2__>
 7b8:	2a b3       	in	r18, 0x1a	; 26
 7ba:	81 e0       	ldi	r24, 0x01	; 1
 7bc:	90 e0       	ldi	r25, 0x00	; 0
 7be:	02 c0       	rjmp	.+4      	; 0x7c4 <DIO_SET_PIN_DIREC+0xde>
 7c0:	88 0f       	add	r24, r24
 7c2:	99 1f       	adc	r25, r25
 7c4:	6a 95       	dec	r22
 7c6:	e2 f7       	brpl	.-8      	; 0x7c0 <DIO_SET_PIN_DIREC+0xda>
 7c8:	80 95       	com	r24
 7ca:	82 23       	and	r24, r18
 7cc:	8a bb       	out	0x1a, r24	; 26
 7ce:	08 95       	ret
 7d0:	27 b3       	in	r18, 0x17	; 23
 7d2:	81 e0       	ldi	r24, 0x01	; 1
 7d4:	90 e0       	ldi	r25, 0x00	; 0
 7d6:	02 c0       	rjmp	.+4      	; 0x7dc <DIO_SET_PIN_DIREC+0xf6>
 7d8:	88 0f       	add	r24, r24
 7da:	99 1f       	adc	r25, r25
 7dc:	6a 95       	dec	r22
 7de:	e2 f7       	brpl	.-8      	; 0x7d8 <DIO_SET_PIN_DIREC+0xf2>
 7e0:	80 95       	com	r24
 7e2:	82 23       	and	r24, r18
 7e4:	87 bb       	out	0x17, r24	; 23
 7e6:	08 95       	ret
 7e8:	24 b3       	in	r18, 0x14	; 20
 7ea:	81 e0       	ldi	r24, 0x01	; 1
 7ec:	90 e0       	ldi	r25, 0x00	; 0
 7ee:	02 c0       	rjmp	.+4      	; 0x7f4 <DIO_SET_PIN_DIREC+0x10e>
 7f0:	88 0f       	add	r24, r24
 7f2:	99 1f       	adc	r25, r25
 7f4:	6a 95       	dec	r22
 7f6:	e2 f7       	brpl	.-8      	; 0x7f0 <DIO_SET_PIN_DIREC+0x10a>
 7f8:	80 95       	com	r24
 7fa:	82 23       	and	r24, r18
 7fc:	84 bb       	out	0x14, r24	; 20
 7fe:	08 95       	ret
 800:	21 b3       	in	r18, 0x11	; 17
 802:	81 e0       	ldi	r24, 0x01	; 1
 804:	90 e0       	ldi	r25, 0x00	; 0
 806:	02 c0       	rjmp	.+4      	; 0x80c <DIO_SET_PIN_DIREC+0x126>
 808:	88 0f       	add	r24, r24
 80a:	99 1f       	adc	r25, r25
 80c:	6a 95       	dec	r22
 80e:	e2 f7       	brpl	.-8      	; 0x808 <DIO_SET_PIN_DIREC+0x122>
 810:	80 95       	com	r24
 812:	82 23       	and	r24, r18
 814:	81 bb       	out	0x11, r24	; 17
 816:	08 95       	ret
 818:	22 b1       	in	r18, 0x02	; 2
 81a:	81 e0       	ldi	r24, 0x01	; 1
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	02 c0       	rjmp	.+4      	; 0x824 <DIO_SET_PIN_DIREC+0x13e>
 820:	88 0f       	add	r24, r24
 822:	99 1f       	adc	r25, r25
 824:	6a 95       	dec	r22
 826:	e2 f7       	brpl	.-8      	; 0x820 <DIO_SET_PIN_DIREC+0x13a>
 828:	80 95       	com	r24
 82a:	82 23       	and	r24, r18
 82c:	82 b9       	out	0x02, r24	; 2
 82e:	08 95       	ret
 830:	e1 e6       	ldi	r30, 0x61	; 97
 832:	f0 e0       	ldi	r31, 0x00	; 0
 834:	20 81       	ld	r18, Z
 836:	81 e0       	ldi	r24, 0x01	; 1
 838:	90 e0       	ldi	r25, 0x00	; 0
 83a:	02 c0       	rjmp	.+4      	; 0x840 <DIO_SET_PIN_DIREC+0x15a>
 83c:	88 0f       	add	r24, r24
 83e:	99 1f       	adc	r25, r25
 840:	6a 95       	dec	r22
 842:	e2 f7       	brpl	.-8      	; 0x83c <DIO_SET_PIN_DIREC+0x156>
 844:	80 95       	com	r24
 846:	82 23       	and	r24, r18
 848:	80 83       	st	Z, r24
 84a:	08 95       	ret
 84c:	e4 e6       	ldi	r30, 0x64	; 100
 84e:	f0 e0       	ldi	r31, 0x00	; 0
 850:	20 81       	ld	r18, Z
 852:	81 e0       	ldi	r24, 0x01	; 1
 854:	90 e0       	ldi	r25, 0x00	; 0
 856:	02 c0       	rjmp	.+4      	; 0x85c <DIO_SET_PIN_DIREC+0x176>
 858:	88 0f       	add	r24, r24
 85a:	99 1f       	adc	r25, r25
 85c:	6a 95       	dec	r22
 85e:	e2 f7       	brpl	.-8      	; 0x858 <DIO_SET_PIN_DIREC+0x172>
 860:	80 95       	com	r24
 862:	82 23       	and	r24, r18
 864:	80 83       	st	Z, r24
 866:	08 95       	ret

00000868 <DIO_SET_PIN_VALUE>:
 868:	44 23       	and	r20, r20
 86a:	09 f4       	brne	.+2      	; 0x86e <DIO_SET_PIN_VALUE+0x6>
 86c:	5d c0       	rjmp	.+186    	; 0x928 <DIO_SET_PIN_VALUE+0xc0>
 86e:	41 30       	cpi	r20, 0x01	; 1
 870:	09 f0       	breq	.+2      	; 0x874 <DIO_SET_PIN_VALUE+0xc>
 872:	91 c0       	rjmp	.+290    	; 0x996 <DIO_SET_PIN_VALUE+0x12e>
 874:	90 e0       	ldi	r25, 0x00	; 0
 876:	87 30       	cpi	r24, 0x07	; 7
 878:	91 05       	cpc	r25, r1
 87a:	08 f0       	brcs	.+2      	; 0x87e <DIO_SET_PIN_VALUE+0x16>
 87c:	8c c0       	rjmp	.+280    	; 0x996 <DIO_SET_PIN_VALUE+0x12e>
 87e:	fc 01       	movw	r30, r24
 880:	ec 5a       	subi	r30, 0xAC	; 172
 882:	ff 4f       	sbci	r31, 0xFF	; 255
 884:	8e c1       	rjmp	.+796    	; 0xba2 <__tablejump2__>
 886:	2b b3       	in	r18, 0x1b	; 27
 888:	81 e0       	ldi	r24, 0x01	; 1
 88a:	90 e0       	ldi	r25, 0x00	; 0
 88c:	02 c0       	rjmp	.+4      	; 0x892 <DIO_SET_PIN_VALUE+0x2a>
 88e:	88 0f       	add	r24, r24
 890:	99 1f       	adc	r25, r25
 892:	6a 95       	dec	r22
 894:	e2 f7       	brpl	.-8      	; 0x88e <DIO_SET_PIN_VALUE+0x26>
 896:	82 2b       	or	r24, r18
 898:	8b bb       	out	0x1b, r24	; 27
 89a:	08 95       	ret
 89c:	28 b3       	in	r18, 0x18	; 24
 89e:	81 e0       	ldi	r24, 0x01	; 1
 8a0:	90 e0       	ldi	r25, 0x00	; 0
 8a2:	02 c0       	rjmp	.+4      	; 0x8a8 <DIO_SET_PIN_VALUE+0x40>
 8a4:	88 0f       	add	r24, r24
 8a6:	99 1f       	adc	r25, r25
 8a8:	6a 95       	dec	r22
 8aa:	e2 f7       	brpl	.-8      	; 0x8a4 <DIO_SET_PIN_VALUE+0x3c>
 8ac:	82 2b       	or	r24, r18
 8ae:	88 bb       	out	0x18, r24	; 24
 8b0:	08 95       	ret
 8b2:	25 b3       	in	r18, 0x15	; 21
 8b4:	81 e0       	ldi	r24, 0x01	; 1
 8b6:	90 e0       	ldi	r25, 0x00	; 0
 8b8:	02 c0       	rjmp	.+4      	; 0x8be <DIO_SET_PIN_VALUE+0x56>
 8ba:	88 0f       	add	r24, r24
 8bc:	99 1f       	adc	r25, r25
 8be:	6a 95       	dec	r22
 8c0:	e2 f7       	brpl	.-8      	; 0x8ba <DIO_SET_PIN_VALUE+0x52>
 8c2:	82 2b       	or	r24, r18
 8c4:	85 bb       	out	0x15, r24	; 21
 8c6:	08 95       	ret
 8c8:	22 b3       	in	r18, 0x12	; 18
 8ca:	81 e0       	ldi	r24, 0x01	; 1
 8cc:	90 e0       	ldi	r25, 0x00	; 0
 8ce:	02 c0       	rjmp	.+4      	; 0x8d4 <DIO_SET_PIN_VALUE+0x6c>
 8d0:	88 0f       	add	r24, r24
 8d2:	99 1f       	adc	r25, r25
 8d4:	6a 95       	dec	r22
 8d6:	e2 f7       	brpl	.-8      	; 0x8d0 <DIO_SET_PIN_VALUE+0x68>
 8d8:	82 2b       	or	r24, r18
 8da:	82 bb       	out	0x12, r24	; 18
 8dc:	08 95       	ret
 8de:	23 b1       	in	r18, 0x03	; 3
 8e0:	81 e0       	ldi	r24, 0x01	; 1
 8e2:	90 e0       	ldi	r25, 0x00	; 0
 8e4:	02 c0       	rjmp	.+4      	; 0x8ea <DIO_SET_PIN_VALUE+0x82>
 8e6:	88 0f       	add	r24, r24
 8e8:	99 1f       	adc	r25, r25
 8ea:	6a 95       	dec	r22
 8ec:	e2 f7       	brpl	.-8      	; 0x8e6 <DIO_SET_PIN_VALUE+0x7e>
 8ee:	82 2b       	or	r24, r18
 8f0:	83 b9       	out	0x03, r24	; 3
 8f2:	08 95       	ret
 8f4:	e2 e6       	ldi	r30, 0x62	; 98
 8f6:	f0 e0       	ldi	r31, 0x00	; 0
 8f8:	20 81       	ld	r18, Z
 8fa:	81 e0       	ldi	r24, 0x01	; 1
 8fc:	90 e0       	ldi	r25, 0x00	; 0
 8fe:	02 c0       	rjmp	.+4      	; 0x904 <DIO_SET_PIN_VALUE+0x9c>
 900:	88 0f       	add	r24, r24
 902:	99 1f       	adc	r25, r25
 904:	6a 95       	dec	r22
 906:	e2 f7       	brpl	.-8      	; 0x900 <DIO_SET_PIN_VALUE+0x98>
 908:	82 2b       	or	r24, r18
 90a:	80 83       	st	Z, r24
 90c:	08 95       	ret
 90e:	e5 e6       	ldi	r30, 0x65	; 101
 910:	f0 e0       	ldi	r31, 0x00	; 0
 912:	20 81       	ld	r18, Z
 914:	81 e0       	ldi	r24, 0x01	; 1
 916:	90 e0       	ldi	r25, 0x00	; 0
 918:	02 c0       	rjmp	.+4      	; 0x91e <DIO_SET_PIN_VALUE+0xb6>
 91a:	88 0f       	add	r24, r24
 91c:	99 1f       	adc	r25, r25
 91e:	6a 95       	dec	r22
 920:	e2 f7       	brpl	.-8      	; 0x91a <DIO_SET_PIN_VALUE+0xb2>
 922:	82 2b       	or	r24, r18
 924:	80 83       	st	Z, r24
 926:	08 95       	ret
 928:	81 30       	cpi	r24, 0x01	; 1
 92a:	91 f0       	breq	.+36     	; 0x950 <DIO_SET_PIN_VALUE+0xe8>
 92c:	28 f0       	brcs	.+10     	; 0x938 <DIO_SET_PIN_VALUE+0xd0>
 92e:	82 30       	cpi	r24, 0x02	; 2
 930:	d9 f0       	breq	.+54     	; 0x968 <DIO_SET_PIN_VALUE+0x100>
 932:	83 30       	cpi	r24, 0x03	; 3
 934:	29 f1       	breq	.+74     	; 0x980 <DIO_SET_PIN_VALUE+0x118>
 936:	08 95       	ret
 938:	2b b3       	in	r18, 0x1b	; 27
 93a:	81 e0       	ldi	r24, 0x01	; 1
 93c:	90 e0       	ldi	r25, 0x00	; 0
 93e:	02 c0       	rjmp	.+4      	; 0x944 <DIO_SET_PIN_VALUE+0xdc>
 940:	88 0f       	add	r24, r24
 942:	99 1f       	adc	r25, r25
 944:	6a 95       	dec	r22
 946:	e2 f7       	brpl	.-8      	; 0x940 <DIO_SET_PIN_VALUE+0xd8>
 948:	80 95       	com	r24
 94a:	82 23       	and	r24, r18
 94c:	8b bb       	out	0x1b, r24	; 27
 94e:	08 95       	ret
 950:	28 b3       	in	r18, 0x18	; 24
 952:	81 e0       	ldi	r24, 0x01	; 1
 954:	90 e0       	ldi	r25, 0x00	; 0
 956:	02 c0       	rjmp	.+4      	; 0x95c <DIO_SET_PIN_VALUE+0xf4>
 958:	88 0f       	add	r24, r24
 95a:	99 1f       	adc	r25, r25
 95c:	6a 95       	dec	r22
 95e:	e2 f7       	brpl	.-8      	; 0x958 <DIO_SET_PIN_VALUE+0xf0>
 960:	80 95       	com	r24
 962:	82 23       	and	r24, r18
 964:	88 bb       	out	0x18, r24	; 24
 966:	08 95       	ret
 968:	25 b3       	in	r18, 0x15	; 21
 96a:	81 e0       	ldi	r24, 0x01	; 1
 96c:	90 e0       	ldi	r25, 0x00	; 0
 96e:	02 c0       	rjmp	.+4      	; 0x974 <DIO_SET_PIN_VALUE+0x10c>
 970:	88 0f       	add	r24, r24
 972:	99 1f       	adc	r25, r25
 974:	6a 95       	dec	r22
 976:	e2 f7       	brpl	.-8      	; 0x970 <DIO_SET_PIN_VALUE+0x108>
 978:	80 95       	com	r24
 97a:	82 23       	and	r24, r18
 97c:	85 bb       	out	0x15, r24	; 21
 97e:	08 95       	ret
 980:	22 b3       	in	r18, 0x12	; 18
 982:	81 e0       	ldi	r24, 0x01	; 1
 984:	90 e0       	ldi	r25, 0x00	; 0
 986:	02 c0       	rjmp	.+4      	; 0x98c <DIO_SET_PIN_VALUE+0x124>
 988:	88 0f       	add	r24, r24
 98a:	99 1f       	adc	r25, r25
 98c:	6a 95       	dec	r22
 98e:	e2 f7       	brpl	.-8      	; 0x988 <DIO_SET_PIN_VALUE+0x120>
 990:	80 95       	com	r24
 992:	82 23       	and	r24, r18
 994:	82 bb       	out	0x12, r24	; 18
 996:	08 95       	ret

00000998 <DIO_TOOGLE_PIN>:
	}
}

void DIO_TOOGLE_PIN (DIO_PORT_ID PORT ,DIO_PIN_ID PIN)
{
	switch (PORT)
 998:	90 e0       	ldi	r25, 0x00	; 0
 99a:	87 30       	cpi	r24, 0x07	; 7
 99c:	91 05       	cpc	r25, r1
 99e:	08 f0       	brcs	.+2      	; 0x9a2 <DIO_TOOGLE_PIN+0xa>
 9a0:	54 c0       	rjmp	.+168    	; 0xa4a <DIO_TOOGLE_PIN+0xb2>
 9a2:	fc 01       	movw	r30, r24
 9a4:	e5 5a       	subi	r30, 0xA5	; 165
 9a6:	ff 4f       	sbci	r31, 0xFF	; 255
 9a8:	fc c0       	rjmp	.+504    	; 0xba2 <__tablejump2__>
	{
		
		case DIO_PORTA:
		
		TOGGLE_BIT (PORTA , PIN);
 9aa:	2b b3       	in	r18, 0x1b	; 27
 9ac:	81 e0       	ldi	r24, 0x01	; 1
 9ae:	90 e0       	ldi	r25, 0x00	; 0
 9b0:	02 c0       	rjmp	.+4      	; 0x9b6 <DIO_TOOGLE_PIN+0x1e>
 9b2:	88 0f       	add	r24, r24
 9b4:	99 1f       	adc	r25, r25
 9b6:	6a 95       	dec	r22
 9b8:	e2 f7       	brpl	.-8      	; 0x9b2 <DIO_TOOGLE_PIN+0x1a>
 9ba:	82 27       	eor	r24, r18
 9bc:	8b bb       	out	0x1b, r24	; 27
		
		break;
 9be:	08 95       	ret
		
		case DIO_PORTB:
		
		TOGGLE_BIT (PORTB , PIN);
 9c0:	28 b3       	in	r18, 0x18	; 24
 9c2:	81 e0       	ldi	r24, 0x01	; 1
 9c4:	90 e0       	ldi	r25, 0x00	; 0
 9c6:	02 c0       	rjmp	.+4      	; 0x9cc <DIO_TOOGLE_PIN+0x34>
 9c8:	88 0f       	add	r24, r24
 9ca:	99 1f       	adc	r25, r25
 9cc:	6a 95       	dec	r22
 9ce:	e2 f7       	brpl	.-8      	; 0x9c8 <DIO_TOOGLE_PIN+0x30>
 9d0:	82 27       	eor	r24, r18
 9d2:	88 bb       	out	0x18, r24	; 24
		
		break;
 9d4:	08 95       	ret
		
		case DIO_PORTC:
		
		TOGGLE_BIT (PORTC ,PIN);
 9d6:	25 b3       	in	r18, 0x15	; 21
 9d8:	81 e0       	ldi	r24, 0x01	; 1
 9da:	90 e0       	ldi	r25, 0x00	; 0
 9dc:	02 c0       	rjmp	.+4      	; 0x9e2 <DIO_TOOGLE_PIN+0x4a>
 9de:	88 0f       	add	r24, r24
 9e0:	99 1f       	adc	r25, r25
 9e2:	6a 95       	dec	r22
 9e4:	e2 f7       	brpl	.-8      	; 0x9de <DIO_TOOGLE_PIN+0x46>
 9e6:	82 27       	eor	r24, r18
 9e8:	85 bb       	out	0x15, r24	; 21
		
		break;
 9ea:	08 95       	ret
		
		case DIO_PORTD:
		
		TOGGLE_BIT (PORTD , PIN);
 9ec:	22 b3       	in	r18, 0x12	; 18
 9ee:	81 e0       	ldi	r24, 0x01	; 1
 9f0:	90 e0       	ldi	r25, 0x00	; 0
 9f2:	02 c0       	rjmp	.+4      	; 0x9f8 <DIO_TOOGLE_PIN+0x60>
 9f4:	88 0f       	add	r24, r24
 9f6:	99 1f       	adc	r25, r25
 9f8:	6a 95       	dec	r22
 9fa:	e2 f7       	brpl	.-8      	; 0x9f4 <DIO_TOOGLE_PIN+0x5c>
 9fc:	82 27       	eor	r24, r18
 9fe:	82 bb       	out	0x12, r24	; 18
		
		break;
 a00:	08 95       	ret
		
		case DIO_PORTE:
		
		TOGGLE_BIT (PORTE , PIN);
 a02:	23 b1       	in	r18, 0x03	; 3
 a04:	81 e0       	ldi	r24, 0x01	; 1
 a06:	90 e0       	ldi	r25, 0x00	; 0
 a08:	02 c0       	rjmp	.+4      	; 0xa0e <DIO_TOOGLE_PIN+0x76>
 a0a:	88 0f       	add	r24, r24
 a0c:	99 1f       	adc	r25, r25
 a0e:	6a 95       	dec	r22
 a10:	e2 f7       	brpl	.-8      	; 0xa0a <DIO_TOOGLE_PIN+0x72>
 a12:	82 27       	eor	r24, r18
 a14:	83 b9       	out	0x03, r24	; 3
		
		break;
 a16:	08 95       	ret
		
		case DIO_PORTF:
		
		TOGGLE_BIT (PORTF , PIN);
 a18:	e2 e6       	ldi	r30, 0x62	; 98
 a1a:	f0 e0       	ldi	r31, 0x00	; 0
 a1c:	20 81       	ld	r18, Z
 a1e:	81 e0       	ldi	r24, 0x01	; 1
 a20:	90 e0       	ldi	r25, 0x00	; 0
 a22:	02 c0       	rjmp	.+4      	; 0xa28 <DIO_TOOGLE_PIN+0x90>
 a24:	88 0f       	add	r24, r24
 a26:	99 1f       	adc	r25, r25
 a28:	6a 95       	dec	r22
 a2a:	e2 f7       	brpl	.-8      	; 0xa24 <DIO_TOOGLE_PIN+0x8c>
 a2c:	82 27       	eor	r24, r18
 a2e:	80 83       	st	Z, r24
		
		break;
 a30:	08 95       	ret
		
		case DIO_PORTG:
		
		TOGGLE_BIT (PORTG , PIN);
 a32:	e5 e6       	ldi	r30, 0x65	; 101
 a34:	f0 e0       	ldi	r31, 0x00	; 0
 a36:	20 81       	ld	r18, Z
 a38:	81 e0       	ldi	r24, 0x01	; 1
 a3a:	90 e0       	ldi	r25, 0x00	; 0
 a3c:	02 c0       	rjmp	.+4      	; 0xa42 <DIO_TOOGLE_PIN+0xaa>
 a3e:	88 0f       	add	r24, r24
 a40:	99 1f       	adc	r25, r25
 a42:	6a 95       	dec	r22
 a44:	e2 f7       	brpl	.-8      	; 0xa3e <DIO_TOOGLE_PIN+0xa6>
 a46:	82 27       	eor	r24, r18
 a48:	80 83       	st	Z, r24
 a4a:	08 95       	ret

00000a4c <__vector_11>:


void (*InterruptSource_voidISR[2])(void)= {NULL };
	
	
ISR( TIMER1_CAPT) {
 a4c:	1f 92       	push	r1
 a4e:	0f 92       	push	r0
 a50:	0f b6       	in	r0, 0x3f	; 63
 a52:	0f 92       	push	r0
 a54:	11 24       	eor	r1, r1
 a56:	0b b6       	in	r0, 0x3b	; 59
 a58:	0f 92       	push	r0
 a5a:	2f 93       	push	r18
 a5c:	3f 93       	push	r19
 a5e:	4f 93       	push	r20
 a60:	5f 93       	push	r21
 a62:	6f 93       	push	r22
 a64:	7f 93       	push	r23
 a66:	8f 93       	push	r24
 a68:	9f 93       	push	r25
 a6a:	af 93       	push	r26
 a6c:	bf 93       	push	r27
 a6e:	ef 93       	push	r30
 a70:	ff 93       	push	r31
	if (InterruptSource_voidISR[ICU1] != NULL) {
 a72:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <InterruptSource_voidISR>
 a76:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <InterruptSource_voidISR+0x1>
 a7a:	30 97       	sbiw	r30, 0x00	; 0
 a7c:	09 f0       	breq	.+2      	; 0xa80 <__vector_11+0x34>
		InterruptSource_voidISR[ICU1]();
 a7e:	09 95       	icall
	}
}
 a80:	ff 91       	pop	r31
 a82:	ef 91       	pop	r30
 a84:	bf 91       	pop	r27
 a86:	af 91       	pop	r26
 a88:	9f 91       	pop	r25
 a8a:	8f 91       	pop	r24
 a8c:	7f 91       	pop	r23
 a8e:	6f 91       	pop	r22
 a90:	5f 91       	pop	r21
 a92:	4f 91       	pop	r20
 a94:	3f 91       	pop	r19
 a96:	2f 91       	pop	r18
 a98:	0f 90       	pop	r0
 a9a:	0b be       	out	0x3b, r0	; 59
 a9c:	0f 90       	pop	r0
 a9e:	0f be       	out	0x3f, r0	; 63
 aa0:	0f 90       	pop	r0
 aa2:	1f 90       	pop	r1
 aa4:	18 95       	reti

00000aa6 <__vector_25>:
ISR( TIMER3_CAPT) {
 aa6:	1f 92       	push	r1
 aa8:	0f 92       	push	r0
 aaa:	0f b6       	in	r0, 0x3f	; 63
 aac:	0f 92       	push	r0
 aae:	11 24       	eor	r1, r1
 ab0:	0b b6       	in	r0, 0x3b	; 59
 ab2:	0f 92       	push	r0
 ab4:	2f 93       	push	r18
 ab6:	3f 93       	push	r19
 ab8:	4f 93       	push	r20
 aba:	5f 93       	push	r21
 abc:	6f 93       	push	r22
 abe:	7f 93       	push	r23
 ac0:	8f 93       	push	r24
 ac2:	9f 93       	push	r25
 ac4:	af 93       	push	r26
 ac6:	bf 93       	push	r27
 ac8:	ef 93       	push	r30
 aca:	ff 93       	push	r31
	if (InterruptSource_voidISR[ICU3] != NULL) {
 acc:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <InterruptSource_voidISR+0x2>
 ad0:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <InterruptSource_voidISR+0x3>
 ad4:	30 97       	sbiw	r30, 0x00	; 0
 ad6:	09 f0       	breq	.+2      	; 0xada <__vector_25+0x34>
		InterruptSource_voidISR[ICU3]();
 ad8:	09 95       	icall
	}
}
 ada:	ff 91       	pop	r31
 adc:	ef 91       	pop	r30
 ade:	bf 91       	pop	r27
 ae0:	af 91       	pop	r26
 ae2:	9f 91       	pop	r25
 ae4:	8f 91       	pop	r24
 ae6:	7f 91       	pop	r23
 ae8:	6f 91       	pop	r22
 aea:	5f 91       	pop	r21
 aec:	4f 91       	pop	r20
 aee:	3f 91       	pop	r19
 af0:	2f 91       	pop	r18
 af2:	0f 90       	pop	r0
 af4:	0b be       	out	0x3b, r0	; 59
 af6:	0f 90       	pop	r0
 af8:	0f be       	out	0x3f, r0	; 63
 afa:	0f 90       	pop	r0
 afc:	1f 90       	pop	r1
 afe:	18 95       	reti

00000b00 <TIMER_3_INT>:


// TAKES TIME IN MILLI SEC //

void TIMER_3_SET_TIME (uint32 WANTED_TIME_MSEC)
{
 b00:	41 e0       	ldi	r20, 0x01	; 1
 b02:	63 e0       	ldi	r22, 0x03	; 3
 b04:	84 e0       	ldi	r24, 0x04	; 4
 b06:	ef dd       	rcall	.-1058   	; 0x6e6 <DIO_SET_PIN_DIREC>
 b08:	eb e8       	ldi	r30, 0x8B	; 139
 b0a:	f0 e0       	ldi	r31, 0x00	; 0
 b0c:	80 81       	ld	r24, Z
 b0e:	8e 7f       	andi	r24, 0xFE	; 254
 b10:	80 83       	st	Z, r24
 b12:	80 81       	ld	r24, Z
 b14:	82 60       	ori	r24, 0x02	; 2
 b16:	80 83       	st	Z, r24
 b18:	aa e8       	ldi	r26, 0x8A	; 138
 b1a:	b0 e0       	ldi	r27, 0x00	; 0
 b1c:	8c 91       	ld	r24, X
 b1e:	88 60       	ori	r24, 0x08	; 8
 b20:	8c 93       	st	X, r24
 b22:	8c 91       	ld	r24, X
 b24:	80 61       	ori	r24, 0x10	; 16
 b26:	8c 93       	st	X, r24
 b28:	80 81       	ld	r24, Z
 b2a:	8f 7b       	andi	r24, 0xBF	; 191
 b2c:	80 83       	st	Z, r24
 b2e:	80 81       	ld	r24, Z
 b30:	80 68       	ori	r24, 0x80	; 128
 b32:	80 83       	st	Z, r24
 b34:	41 e0       	ldi	r20, 0x01	; 1
 b36:	63 e0       	ldi	r22, 0x03	; 3
 b38:	84 e0       	ldi	r24, 0x04	; 4
 b3a:	96 de       	rcall	.-724    	; 0x868 <DIO_SET_PIN_VALUE>
 b3c:	8f b7       	in	r24, 0x3f	; 63
 b3e:	80 68       	ori	r24, 0x80	; 128
 b40:	8f bf       	out	0x3f, r24	; 63
 b42:	ed e7       	ldi	r30, 0x7D	; 125
 b44:	f0 e0       	ldi	r31, 0x00	; 0
 b46:	80 81       	ld	r24, Z
 b48:	80 61       	ori	r24, 0x10	; 16
 b4a:	80 83       	st	Z, r24
 b4c:	08 95       	ret

00000b4e <TIMER_3_SET_DUTY_CYCLE>:
void TIMER_3_SET_DUTY_CYCLE (uint8 DUTY_CYCLE)
{
	
	// SINCE , WE USE FAST PWM MODE WITH MODE NO.14 -> WE CAN STATE THE VALUE NEEDED FOR THE TOP : ICR3 = VALUE ; //
	
	ICR3L = 1024 ; // CHANGE BASED ON APPLICATIN USAGE 
 b4e:	e0 e8       	ldi	r30, 0x80	; 128
 b50:	f0 e0       	ldi	r31, 0x00	; 0
 b52:	20 e0       	ldi	r18, 0x00	; 0
 b54:	34 e0       	ldi	r19, 0x04	; 4
 b56:	31 83       	std	Z+1, r19	; 0x01
 b58:	20 83       	st	Z, r18
	
	OCR3AL = ((DUTY_CYCLE * (ICR3L))/100) -1 ;
 b5a:	40 81       	ld	r20, Z
 b5c:	51 81       	ldd	r21, Z+1	; 0x01
 b5e:	28 2f       	mov	r18, r24
 b60:	24 9f       	mul	r18, r20
 b62:	c0 01       	movw	r24, r0
 b64:	25 9f       	mul	r18, r21
 b66:	90 0d       	add	r25, r0
 b68:	11 24       	eor	r1, r1
 b6a:	9c 01       	movw	r18, r24
 b6c:	36 95       	lsr	r19
 b6e:	27 95       	ror	r18
 b70:	36 95       	lsr	r19
 b72:	27 95       	ror	r18
 b74:	ab e7       	ldi	r26, 0x7B	; 123
 b76:	b4 e1       	ldi	r27, 0x14	; 20
 b78:	1d d0       	rcall	.+58     	; 0xbb4 <__umulhisi3>
 b7a:	96 95       	lsr	r25
 b7c:	87 95       	ror	r24
 b7e:	01 97       	sbiw	r24, 0x01	; 1
 b80:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 b84:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 b88:	08 95       	ret

00000b8a <TIMER_3_DUTY_CYCLE_START>:
	CLR_BIT(TCCR3B , DIO_PIN1);
	SET_BIT(TCCR3B , DIO_PIN2);
	
	#elif TIMER_3_PRE_SCALLER_VALUE == TIMER_3_PRE_SCALLER_DIV_1024
	
	SET_BIT(TCCR3B , DIO_PIN0);
 b8a:	ea e8       	ldi	r30, 0x8A	; 138
 b8c:	f0 e0       	ldi	r31, 0x00	; 0
 b8e:	80 81       	ld	r24, Z
 b90:	81 60       	ori	r24, 0x01	; 1
 b92:	80 83       	st	Z, r24
	CLR_BIT(TCCR3B , DIO_PIN1);
 b94:	80 81       	ld	r24, Z
 b96:	8d 7f       	andi	r24, 0xFD	; 253
 b98:	80 83       	st	Z, r24
	SET_BIT(TCCR3B , DIO_PIN2);
 b9a:	80 81       	ld	r24, Z
 b9c:	84 60       	ori	r24, 0x04	; 4
 b9e:	80 83       	st	Z, r24
 ba0:	08 95       	ret

00000ba2 <__tablejump2__>:
 ba2:	ee 0f       	add	r30, r30
 ba4:	ff 1f       	adc	r31, r31
 ba6:	00 24       	eor	r0, r0
 ba8:	00 1c       	adc	r0, r0
 baa:	0b be       	out	0x3b, r0	; 59
 bac:	07 90       	elpm	r0, Z+
 bae:	f6 91       	elpm	r31, Z
 bb0:	e0 2d       	mov	r30, r0
 bb2:	09 94       	ijmp

00000bb4 <__umulhisi3>:
 bb4:	a2 9f       	mul	r26, r18
 bb6:	b0 01       	movw	r22, r0
 bb8:	b3 9f       	mul	r27, r19
 bba:	c0 01       	movw	r24, r0
 bbc:	a3 9f       	mul	r26, r19
 bbe:	70 0d       	add	r23, r0
 bc0:	81 1d       	adc	r24, r1
 bc2:	11 24       	eor	r1, r1
 bc4:	91 1d       	adc	r25, r1
 bc6:	b2 9f       	mul	r27, r18
 bc8:	70 0d       	add	r23, r0
 bca:	81 1d       	adc	r24, r1
 bcc:	11 24       	eor	r1, r1
 bce:	91 1d       	adc	r25, r1
 bd0:	08 95       	ret

00000bd2 <_exit>:
 bd2:	f8 94       	cli

00000bd4 <__stop_program>:
 bd4:	ff cf       	rjmp	.-2      	; 0xbd4 <__stop_program>
